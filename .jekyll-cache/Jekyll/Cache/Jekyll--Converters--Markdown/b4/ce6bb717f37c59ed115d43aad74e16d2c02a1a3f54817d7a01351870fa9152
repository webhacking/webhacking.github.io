I"?r<h1 id="티스토리가-싫어요">티스토리가 싫어요.</h1>

<p>티스토리의 불편함을 감수하고 꽤 오랜 시간을 사용했다.
이전에는 클라우드형 뿐만아니라 설치형 블로그까지 모두 설렵했다.
설렵한 항목들 중 <code class="highlighter-rouge">그나마</code> 불편함이 적은 티스토리에 정착했었다.
불편함은 이제 너무나 친숙해서 더 이상 불편함을 인지 못하고 있었다.</p>

<blockquote>
  <p>귀찮음이 불편함을 이긴 순간이었다.</p>
</blockquote>

<p>그런데 갑작스레  <code class="highlighter-rouge">이전</code>을 생각한 결정적 계기는 <code class="highlighter-rouge">에디터</code> 였다.
티스토리 에디터를 통해 본문을 수정하면, 의도치 않게 강제로 p 태그 등에 style attribute 가 추가되었다.
이로하여 내 블로그 글들은 전부 폰트 및 사이드가 뒤죽박죽이 되어, 도저히 글을 읽을 엄두가 안나게되었다.
티스토리 스킨에서 별도로 <code class="highlighter-rouge">javascript</code> 로 위 문제에 대한 정규식을 구해 치환해보았지만, 이 또한 클라이언트 사이드에서 불 필요한 coast 였다.
이렇게 클라이언트 사이드에서 강제한다고 한 들, 이미 망가져린 문서 format 을 보니 더 이상의 인내는 없었다.</p>

<h1 id="이사-짐을-꾸려요">이사 짐을 꾸려요.</h1>

<p>작성한 글들을 <code class="highlighter-rouge">markdown</code> 으로 정적으로 정제하고 싶었고, 그 결과 <a href="https://jekyllrb.com/">Jekyll</a>, <a href="https://hexo.io/ko/index.html">Hexo</a> 라는 선택지가 주어졌고  후보군 둘다 고만고만하여 일전에 사용해본 <code class="highlighter-rouge">Jekyll</code> 을 사용하기로 했다.
<code class="highlighter-rouge">jekyll</code> 에 대해 간략하게 소개하자면 웹사이트 생성 도구다.
Markdown, Liquid, YAML, HTML/CSS 등을 편집하고 jekyll 서버를 동작하면 정적 웹 페이지를 생성해준다.</p>

<p><img src="/assets/images/posts/using-jekyll-with-gitHub-pages/1280px-Dr_Jekyll_and_Mr_Hyde_poster_edit2-1.jpg" alt="Dr_Jekyll_and_Mr_Hyde_poster" /></p>

<p><a href="https://en.wikipedia.org/wiki/Strange_Case_of_Dr_Jekyll_and_Mr_Hyde#/media/File:Dr_Jekyll_and_Mr_Hyde_poster_edit2.jpg">Chicago Modifications by Papa Lima Whiskey</a></p>

<blockquote>
  <p>블로그나 프로젝트 웹페이지로 안성맞춤이다</p>
</blockquote>

<p><code class="highlighter-rouge">github</code> 에서는 너무나 고맙게도 <a href="https://pages.github.com/">github page</a> 라는 서비스를 제공하기에 무료 호스팅을 사용할 수 있다. (Thanks github)
<code class="highlighter-rouge">git repository</code>에 gh-pages 브렌치를 만들고 index.html 파일생성하면 프로젝트 사이트를 만들 수 있으니 정말 편하다.
프로젝트 페이지 말고 github account 를 통해 생성할 수 있는데, 이는 <code class="highlighter-rouge">{github account}.github.io</code> 도메인을 부여받는다.</p>

<p>나의 github 계정은 <code class="highlighter-rouge">webhacking</code> 이니 <code class="highlighter-rouge">webhacking.github.io</code> 가 되겠다.
항상 계정명을 보면 네이밍의 중요성을 느낀다.. 중학교 때 사용한 닉네임인데 어른이 되어서 후회할 줄 이야..
<code class="highlighter-rouge">markdown</code>이라는 선택은 훗 날로 하여금  <code class="highlighter-rouge">Jekyll</code> 이 아니더라도, 언제든 다른 플랫폼으로 이전할 수 있다는 이점도있다.
이와 동시에 단점도 동시하는데, Jekyll 은 static html generator 격인데 현재 <code class="highlighter-rouge">markdown</code> 문서 500건 기준으로 생성하는데 소요되는 시간이 <code class="highlighter-rouge">6 seconds</code> 다.
이는 절대 간과할 수 없는 시간이며.. 결국엔 저 소요 시간은 문서의 비례하기에 문서가 증가하면 소요시간이 더 증가하게 되 있어..
먼 훈날 10초 이상을 기다려야 할 수 도 있다.</p>

<p>이 부분에 대해 검색해보면 여러  <code class="highlighter-rouge">optimize</code> 방안이 나오니 크게 문제될 것 은 없다.</p>

<p><img src="/assets/images/posts/using-jekyll-with-gitHub-pages/github-pages-now-runs-jekyll-3-2.png" alt="github-pages-now-runs-jekyll-3-2" /></p>

<p>16년 8월 부터, github page 에서 Jekyll 3.2를 <a href="https://github.com/blog/2236-github-pages-now-runs-jekyll-3-2">적용</a>하고있다.
해당 버전에서 성능 이슈 또한 많이 개선되었으니 앞으로도 많은 발전이 있을 것이라 생각한다.
위 성능부분을 제외하고 이전을 생각하면서 대비해야할 항목이라고 생각한 건 기존 <code class="highlighter-rouge">URI</code> 와의 Link 였다.
티스토리는 기본적으로 문서의 <code class="highlighter-rouge">sequence number</code> 로 URI에 표기하는 반면 <code class="highlighter-rouge">Jekyll</code> 의 경우 자유럽게 표현 할 수 있지만 통상 <code class="highlighter-rouge">날짜-제목</code> 으로 표기하기에 고민이 되었다.
그렇다고 본인이 <code class="highlighter-rouge">sequence number</code> 를 매기면서 까지 문서를 작성하는 건 실상 너무 비효율적이라 후보군에도 제외되었다.
많은 시간 여러 검색 엔진들의 봇이 나의 문서와 관련된 정보를 parsing 한 상태이고
여기서 이전 링크와 관련된 요소들을 포기하고 후자의 format 으로 URI을 사용하게 되면 검색 유입자들과 더불어 검색 엔진들에도 신용도를 잃을 것 이다.</p>

<p>이 신용도는 <a href="https://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94">SEO</a> 에 영향을 미치는데, 나의 블로그는 신용도를 잃어서 검색 유입도 줄어들 것 이다.</p>

<p>그렇다면 기존 URI 로 접근 시, 새로운 URI 로 Redirect 하자.
구글 엔진의 경우 일전까지 30X 상태코드에대해서 <a href="https://moz.com/blog/301-redirection-rules-for-seo">PageRank가 약 15% 손실</a>되었다고한다.
하지만 지금은 아니다.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">30x redirects don&#39;t lose PageRank anymore.</p>&mdash; Gary &quot;鯨理&quot; Illyes (@methode) <a href="https://twitter.com/methode/status/757923179641839616?ref_src=twsrc%5Etfw">July 26, 2016</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>아래는 Google에서 발표한 기존과 변경된 개념을 설명하는 다이어그램입니다</p>

<p><img src="/assets/images/posts/using-jekyll-with-gitHub-pages/579f8a13b1ab83.23472435.jpg" alt="google-page-rank-diagram" /></p>

<p>손실을 방지할 수 있는 방법도 강구했으니, 문서 이전을 시작해보자. 
먼저 이전에  작성한 문서들을 전부 옮겨야 하는데,  2016년도 부터 티스토리는 백업 및 Blog API 기능을 <a href="http://notice.tistory.com/2359">종료</a>하였다.
따라서 별도의 코드를 작성하기로 했다.
내가 작성한 <code class="highlighter-rouge">Python</code> 코드는 <code class="highlighter-rouge">Github</code> 에 <a href="https://github.com/webhacking/migrate-jekyll-from-tistory">공유</a>했다.
아래 <code class="highlighter-rouge">main.py</code> 에서 1부터 최근 마지막 작성한 <code class="highlighter-rouge">sequence number</code> 를 구해, 순차적으로 parsing 하여, 본문을 <code class="highlighter-rouge">markdown</code> 문법으로 치환 후 메타데이터 및 이미지 파일과 함께 저장을 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span><span class="p">,</span> <span class="n">html2text</span>
<span class="kn">from</span> <span class="nn">Tistory.Post</span> <span class="kn">import</span> <span class="n">Post</span>

<span class="n">post</span> <span class="o">=</span> <span class="n">Post</span><span class="p">(</span><span class="n">blog</span><span class="o">=</span><span class="s">'http://blog.hax0r.info'</span><span class="p">,</span> <span class="n">image_dir</span><span class="o">=</span><span class="s">'assets/images/posts/'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">post</span><span class="p">.</span><span class="n">latest</span><span class="p">()):</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">post</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">content</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'수행 :'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">html2text</span><span class="p">.</span><span class="n">HTML2Text</span><span class="p">()</span>
                <span class="n">markdown</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

                <span class="n">replaced</span> <span class="o">=</span> <span class="s">"""
                        ---
                        layout: post
                        title: "%s"
                        description: ""
                        date: %s
                        tags: %s
                        comments: true
                        share: true
                        ---
                """</span> <span class="o">%</span> <span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'title'</span><span class="p">],</span> <span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'published_date'</span><span class="p">],</span> <span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'tags'</span><span class="p">])</span>

                <span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'Storage/Posts/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">'published_date'</span><span class="p">])</span> <span class="o">+</span> <span class="s">'-'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">'.md'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r'(^[ \t]+|[ \t]+(?=:))'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">replaced</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">M</span><span class="p">)</span> <span class="o">+</span> <span class="s">'</span><span class="si">\</span><span class="se">n</span><span class="s">'</span> <span class="o">+</span> <span class="n">markdown</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>아래는 <code class="highlighter-rouge">Post.py</code>  의 내용이다.
전반적으로 specifically 나의 이전 블로그에 초점을 두고 있어, 만약 사용한다면 조금 수정이 필요할 것 이다.</p>

<p>일전에 언급했 듯, 본인은 귀찮음으로 불편함을 이기는 사람이다.</p>

<p>따라서 급히 작성한 코드라 그리 예쁘지 않다는 점을 이해해주길 바란다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="nn">Tistory.Base</span> <span class="kn">import</span> <span class="n">Base</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>


<span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>

        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image_dir</span><span class="p">,</span> <span class="n">blog</span><span class="p">):</span>
                <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">()</span>

                <span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">=</span> <span class="s">"Storage/Images/"</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">blog</span> <span class="o">=</span> <span class="n">blog</span>

                <span class="k">if</span> <span class="n">image_dir</span> <span class="p">:</span>
                        <span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">=</span> <span class="n">image_dir</span>


        <span class="k">def</span> <span class="nf">make_relate_dir</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">page_number</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span><span class="p">):</span>
                        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span><span class="p">)</span>

                <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">)):</span>
                        <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">))</span>

        <span class="o">@</span><span class="nb">staticmethod</span>
        <span class="k">def</span> <span class="nf">clean</span><span class="p">(</span><span class="n">html</span><span class="p">):</span>
                <span class="n">cleanr</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'&lt;.*?&gt;'</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="n">cleanr</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">latest</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
                <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">blog</span> <span class="o">+</span> <span class="s">'/'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">header</span><span class="p">)</span>
                <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
                <span class="n">body</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'body'</span><span class="p">)</span>

                <span class="n">posts_numbers</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">find_all</span><span class="p">(</span><span class="s">'a'</span><span class="p">):</span>
                        <span class="k">if</span> <span class="n">link</span><span class="p">.</span><span class="n">has_attr</span><span class="p">(</span><span class="s">'href'</span><span class="p">):</span>
                                <span class="k">if</span> <span class="ow">not</span> <span class="n">link</span><span class="p">[</span><span class="s">'href'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'/'</span><span class="p">,</span> <span class="s">''</span><span class="p">).</span><span class="n">isdigit</span><span class="p">():</span>
                                        <span class="k">continue</span>
                                <span class="n">posts_numbers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">link</span><span class="p">[</span><span class="s">'href'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'/'</span><span class="p">,</span> <span class="s">''</span><span class="p">)))</span>
                <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">posts_numbers</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

        <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">page_number</span><span class="p">):</span>
                <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">blog</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">),</span> <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">header</span><span class="p">)</span>
                <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>

                <span class="n">body</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'.tt_article_useless_p_margin'</span><span class="p">)</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">body</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">False</span>

                <span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">find_all</span><span class="p">(</span><span class="s">'img'</span><span class="p">):</span>
                        <span class="bp">self</span><span class="p">.</span><span class="n">make_relate_dir</span><span class="p">(</span><span class="n">page_number</span><span class="p">)</span>

                        <span class="n">path</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="s">'src'</span><span class="p">])</span>
                        <span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="s">'src'</span><span class="p">],</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">raw</span><span class="p">)</span>
                        <span class="n">im</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">),</span> <span class="n">file_name</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">im</span><span class="p">.</span><span class="nb">format</span><span class="p">),</span> <span class="n">quality</span><span class="o">=</span><span class="mi">85</span><span class="p">)</span>

                        <span class="n">image</span><span class="p">[</span><span class="s">'src'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">image_dir</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">)</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">file_name</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">im</span><span class="p">.</span><span class="nb">format</span>

                <span class="n">tags</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">title</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'h3.tit_post'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span>
                <span class="n">published_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">r'\</span><span class="err">d{</span><span class="s">4}.\</span><span class="err">d{</span><span class="s">2}.\</span><span class="err">d{</span><span class="s">2}'</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'span.info_post'</span><span class="p">)[</span><span class="mi">0</span><span class="p">])).</span><span class="n">group</span><span class="p">(),</span> <span class="s">'%Y.%m.%d'</span><span class="p">).</span><span class="n">date</span><span class="p">()</span>

                <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'#mArticle dl.list_tag a'</span><span class="p">):</span>
                        <span class="n">tags</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tag</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>

                <span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">"code"</span><span class="p">):</span>
                        <span class="n">code</span><span class="p">.</span><span class="n">replace_with</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">clean</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">code</span><span class="p">.</span><span class="n">findChildren</span><span class="p">()[</span><span class="mi">0</span><span class="p">])))</span>

                <span class="n">content</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">body</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">split</span><span class="p">(</span><span class="s">'&lt;div class="container_postbtn"&gt;'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
                <span class="k">return</span> <span class="n">content</span><span class="p">,</span> <span class="p">{</span>
                        <span class="s">'title'</span> <span class="p">:</span> <span class="n">title</span><span class="p">,</span>
                        <span class="s">'published_date'</span> <span class="p">:</span> <span class="n">published_date</span><span class="p">,</span>
                        <span class="s">'tags'</span> <span class="p">:</span> <span class="n">tags</span>
                <span class="p">}</span>
</code></pre></div></div>
<h2 id="이사-끝">이사 끝</h2>

<p><img src="/assets/images/posts/using-jekyll-with-gitHub-pages/new-blog-screen.png" alt="new-blog" /></p>

<p>귀찮음을 이기고, 마주한 블로그는 아주 마음에들었다.
오랜글들을 다시금 볼 수 있는 기회였고, 덕분에 창피함이 무엇인지 다시금 상기되었다.
현재 테마에서 카테고리, 검색, 포스트 본문 이외 여러부분을 따로 많은 부분을 신경써야한다는 애로사항이 존재했지만
이 또한 높은 자유도라 생각하고 재밌게 그려냈다.</p>

<blockquote>
  <p>본질인 글을 전달하고 싶다.</p>
</blockquote>

<p>이전 티스토리 블로그는 폐쇄할 계획이며, 폐쇄가 되면 모든 데이터는 삭제된다고한다.
그래서 혹시 몰라서 아래와 같이 치환하지 않은 본문 문서를 따로 postfix로 backup을 붙여 저장하기로 했다.</p>

<p><img src="/assets/images/posts/using-jekyll-with-gitHub-pages/screen-shot.png" alt="screen-shot" /></p>

<p>더 이상 블로그를 이전하고 싶지 않다.</p>

<p>왠만하면 테마를 변경하는 일에 내 시간을 쏟고 싶지도 않다.</p>

:ET