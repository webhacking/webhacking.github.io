I";<p><strong>Naming</strong></p>

<p>module_name, package_name, ClassName, method_name, ExceptionName,
function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name,
function_parameter_name, local_var_name.</p>

<p><strong>Names to Avoid</strong></p>

<p>single character names except for counters or iterators</p>

<p>dashes (-) in any package/module name</p>

<p><strong>double_leading_and_trailing_underscore</strong> names (reserved by Python)</p>

<p><strong>Naming Convention</strong></p>

<p>“Internal” means internal to a module or protected or private within a class.</p>

<p>Prepending a single underscore (_) has some support for protecting module
variables and functions (not included with import * from). Prepending a double
underscore (__) to an instance variable or method effectively serves to make
the variable or method private to its class (using name mangling).</p>

<p>Place related classes and top-level functions together in a module. Unlike
Java, there is no need to limit yourself to one class per module.</p>

<p>Use CapWords for class names, but lower_with_under.py for module names.
Although there are many existing modules named CapWords.py, this is now
discouraged because it’s confusing when the module happens to be named after a
class. (“wait – did I write import StringIO or from StringIO import
StringIO?”)</p>

<p>Guidelines derived from Guido’s Recommendations</p>

<p>Type Public Internal</p>

<p>Packages lower_with_under</p>

<p>Modules lower_with_under _lower_with_under</p>

<p>Classes CapWords _CapWords</p>

<p>Exceptions CapWords</p>

<p>Functions lower_with_under() _lower_with_under()</p>

<p>Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER</p>

<p>Global/Class Variables lower_with_under _lower_with_under</p>

<p>Instance Variables lower_with_under _lower_with_under (protected) or
__lower_with_under (private)</p>

<p>Method Names lower_with_under() _lower_with_under() (protected) or
__lower_with_under() (private)</p>

<p>Function/Method Parameters lower_with_under</p>

<p>Local Variables lower_with_under</p>

<p>Main</p>

:ET