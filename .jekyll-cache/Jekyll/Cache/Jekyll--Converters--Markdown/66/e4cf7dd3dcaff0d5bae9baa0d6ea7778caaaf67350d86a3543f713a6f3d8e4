I"†G<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include &lt; stdio.h &gt;

#include &lt; stdlib.h &gt;

#include &lt; time.h &gt;

#include &lt; conio.h &gt;

#include &lt; windows.h &gt;

#include &lt; mmsystem.h &gt;

#pragma comment(lib, "winmm.lib")

# define true 1

# define false 0

# define bool int

# define BOARD_WIDTH 10

# define BOARD_HEIGHT 20

# define BOARD_X 4

# define BOARD_Y 2

# define DELAY 100

enum ControlKeys

{

  UP = 72,

    DOWN = 80,

    LEFT = 75,

    RIGHT = 77,

    SPACE = 32

};

static int score = 0; //Í≤åÏûÑÏ†êÏàò

static int level = 1; //Í≤åÏûÑÎ†àÎ≤®

static int speed = 180; // Î∏îÎü≠Ïù¥ Îñ®Ïñ¥ÏßÄÎäî ÏÜçÎèÑ

int board[BOARD_HEIGHT + 1][BOARD_WIDTH + 2] = {
  0,
};

// 7Í∞úÏùò Î∏îÎü≠ ÏÉùÏÑ±

int blocks[28][4][4] =

  {

    // ‚ñ†‚ñ†‚ñ†‚ñ†

    {

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        1,
        1,
        1
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        1,
        1,
        1
      },

      {
        0,
        0,
        0,
        0
      }

    },

    // ‚ñ†‚ñ†

    // ‚ñ†‚ñ†

    {

      {
        1,
        1,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    // ‚ñ†

    // ‚ñ†‚ñ†‚ñ†

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        1,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        1,
        1,
        0
      },

      {
        0,
        1,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        1,
        0,
        0
      }

    },

    // ‚ñ†

    // ‚ñ†‚ñ†‚ñ†

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        1,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        1,
        0
      },

      {
        1,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        0,
        0,
        0
      },

      {
        1,
        0,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    // ‚ñ†

    // ‚ñ†‚ñ†‚ñ†

    {

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        0,
        0,
        0
      },

      {
        1,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        1,
        1,
        0,
        0
      },

      {
        1,
        0,
        0,
        0
      },

      {
        1,
        0,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    // ‚ñ†‚ñ†

    // ‚ñ†‚ñ†

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    // ‚ñ†‚ñ†

    // ‚ñ†‚ñ†

    {

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        0,
        0
      },

      {
        1,
        1,
        0,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

    {

      {
        0,
        0,
        1,
        0
      },

      {
        0,
        1,
        1,
        0
      },

      {
        0,
        1,
        0,
        0
      },

      {
        0,
        0,
        0,
        0
      }

    },

  }; // Î∏îÎü≠ÏÉùÏÑ± ÏôÑÎ£å

// Ïª§ÏÑúÎ•º ÎÇòÌÉÄÎÇ¥Í±∞ÎÇò Ïà®ÍπÄ

void CursorVisible(bool blnCursorVisible) // Console.CursorVisible = false;

{

  CONSOLE_CURSOR_INFO cursorInfo;

  GetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp; cursorInfo);

  cursorInfo.bVisible = blnCursorVisible;

  SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp; cursorInfo);

}

// Ïª§ÏÑúÏúÑÏπòÎ•º ÏÑ§Ï†ï

void SetCursorPosition(int cursorLeft, int cursorTop) //
Console.SetCursorPosition(posX, posY);

{

  int posX = cursorLeft;

  int posY = cursorTop;

  COORD pos = {
    posX,
    posY
  };

  SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);

}

// Ïª§ÏÑúÏùò ÌòÑÏû¨ ÏúÑÏπòÏ¢åÌëú ÏñªÍ∏∞

COORD GetCursorPosition(void)

{

  COORD cursor;

  CONSOLE_SCREEN_BUFFER_INFO cursorInfo;

  GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &amp; cursorInfo);

  cursor.X = cursorInfo.dwCursorPosition.X;

  cursor.Y = cursorInfo.dwCursorPosition.Y;

  return cursor;

}

//ÏãúÏûë ÌôîÎ©¥ Î∞è ÏΩòÏÜî Ï¥àÍ∏∞Ìôî

void ConsoleInit()

{

  // ÏΩòÏÜî Ï¥àÍ∏∞Ìôî Î∞è ÏãúÏûë ÌôîÎ©¥ Íµ¨ÏÑ± ÏòÅÏó≠

  printf("C Language Tetris Game\n\n");

  printf("Made by. ReverserHW\n\n");

  printf("=================================== \n");

  printf(":: Ï°∞ÏûëÌÇ§ :: \n");

  printf("[‚Üí] Î∏îÎ°ùÏùÑ Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïù¥Îèô \n");

  printf("[‚Üê] Î∏îÎ°ùÏùÑ ÏôºÏ™ΩÏúºÎ°ú Ïù¥Îèô \n");

  printf("[‚Üë] Î∏îÎ°ùÏùÑ ÏôºÏ™ΩÏúºÎ°ú ÌöåÏ†ÑÌïòÍ∏∞ \n");

  printf("[‚Üì] Î∏îÎ°ùÏùÑ ÏïÑÎûòÎ°ú 1Ïπ∏ ÎÇ¥Î¶¨Í∏∞ \n");

  printf("[Space] ÏïÑÎûòÎ°ú Îñ®Ïñ¥Îú®Î¶¨Í∏∞ \n");

  printf(" \n");

  printf("ÏïÑÎ¨¥ÌÇ§ÎÇò ÎàÑÎ•¥Î©¥ ÏãúÏûëÎê©ÎãàÎã§. \n");

  printf("=================================== \n");

  getch();

  system("cls");

  CursorVisible(false);

  SetCursorPosition(0, 0);

}

// Í≤åÏûÑÌåê Í∑∏Î¶¨Í∏∞

void DrawField(void)

{

  int x, y;

  //Ï§ëÏïô Î≥¥Îìú ÎùºÏù∏

  for (x = 1; x &lt;= BOARD_WIDTH + 1; x++)

  {

    board[BOARD_HEIGHT][x] = 1; //board Î∞∞Ïó¥ Ï§ëÏïô 1Ïù∏Ïãù

    SetCursorPosition((BOARD_X) + x * 2, BOARD_Y + BOARD_HEIGHT); //ÏΩòÏÜîÏ¢åÌëú

    printf("‚îÅ");

  }

  //ÏôºÏ™Ω Î≥¥Îìú ÎùºÏù∏

  for (y = 0; y &lt; BOARD_HEIGHT + 1; y++)

  {

    board[y][0] = 1; //board Î∞∞Ïó¥ ÏôºÏ™Ω 1Ïù∏Ïãù

    SetCursorPosition(BOARD_X, BOARD_Y + y);

    if (y == BOARD_HEIGHT)

      printf("‚îó");

    else

      printf("‚îÉ");

  }

  //Ïò§Î•∏Ï™Ω Î≥¥Îìú ÎùºÏù∏

  for (y = 0; y &lt; BOARD_HEIGHT + 1; y++)

  {

    board[y][BOARD_WIDTH + 1] = 1; //board Î∞∞Ïó¥ Ïò§Î•∏Ï™Ω 1Ïù∏Ïãù

    SetCursorPosition(BOARD_X + (BOARD_WIDTH + 2) * 2, BOARD_Y + y);

    if (y == BOARD_HEIGHT)

      printf("‚îõ");

    else

      printf("‚îÉ");

  }

  //Î™®ÏÑúÎ¶¨Í∞í Î≥ÄÍ≤Ω

  board[20][0] = 1;

  board[20][11] = 1;

  puts(" ");

}

// Ï†êÏàòÌåê Ï∂úÎ†•

void ShowScore(void)

{

  SetCursorPosition(40, 3);

  printf("CÏñ∏Ïñ¥ ÏΩòÏÜî ÌÖåÏä§Î¶¨Ïä§");

  SetCursorPosition(40, 5);

  printf("Î†àÎ≤®: %d\n", level);

  SetCursorPosition(40, 7);

  printf("Ï†êÏàò: %d\n", score);

}

// ÏÇ¨Ïö© Í∞ÄÎä• ÏúÑÏπò Ï≤¥ÌÅ¨

// ÌäπÏ†ï ÏúÑÏπòÏóê Î∏îÎ°ùÏù¥ Îì§Ïñ¥Í∞à Ïàò ÏûàÎäîÏßÄ ÏïÑÎãåÏßÄÎ•º Ï≤¥ÌÅ¨

// Îì§Ïñ¥Í∞à Ïàò ÏûàÏúºÎ©¥ true, ÏóÜÏúºÎ©¥ false Î∞òÌôò

bool CanPositionedAt(int rotation, int move1, int move2)

{

  int x, y;

  int arrX, arrY; // Î∞∞Ïó¥Ï¢åÌëúÏ†ÄÏû•

  COORD pos = GetCursorPosition();

  arrX = pos.X + move1;

  arrY = pos.Y + move2;

  arrX = (arrX / 2) - 2;

  arrY = arrY - BOARD_Y;

  for (y = 0; y &lt; 4; y++)

  {

    for (x = 0; x &lt; 4; x++)

    {

      if ((blocks[rotation][y][x] == 1) &amp;&amp; board[arrY + y][arrX + x] == 1)

        return false; //Î≥¥ÎìúÏôÄ Î≤ΩÎèå Í≤πÏπ®

    }

  }

  return true; //Í≤πÏπòÏßÄ ÏïäÏùå

}

// ÌòÑÏû¨ ÏúÑÏπòÏóê Î∏îÎ°ù Ï∂úÎ†•

void WriteBlock(int rotation)

{

  int i, j;

  COORD cursor = GetCursorPosition();

  if (CanPositionedAt(rotation, 0, 0) == true)

  {

    //ÏΩòÏÜîÏ∞ΩÏúÑÏπò ÏÑ§Ï†ï, Î∞∞Ïó¥Í∞íÏóêÏÑú 1ÏùÄ ‚ñ†Ï∂úÎ†•, 0ÏùÄ Ï∂úÎ†•ÏóÜÏùå

    for (i = 0; i &lt; 4; i++) // Ìñâ Î∞òÎ≥µ

    {

      for (j = 0; j &lt; 4; j++) // Ïó¥ Î∞òÎ≥µ

      {

        SetCursorPosition(cursor.X + (j * 2), cursor.Y + i);

        if (blocks[rotation][i][j] == 1)

        {

          printf("‚ñ†");

        }

      }

    }

    SetCursorPosition(cursor.X, cursor.Y);

  }

}

// Î∏îÎ°ù Î≥¥ÎìúÌåêÏóêÏÑú 1Ïù∏Ïãù

void BoardInit(int n, int move1, int move2)

{

  COORD pos = GetCursorPosition();

  int arrX = pos.X + move1; //ÏΩòÏÜîÏ¢åÌëú Ïó¥

  int arrY = pos.Y + move2; //ÏΩòÏÜîÏ¢åÌëú Ìñâ

  int x, y;

  /*Ïª§ÏÑúÏúÑÏπòÏ†ïÎ≥¥-&gt;Î∞∞Ïó¥ÏúÑÏπòÏ†ïÎ≥¥ Î≥ÄÍ≤Ω*/

  arrX = arrX / 2 - 2; //ÏΩòÏÜîÏ¢åÌëú-&gt;Î∞∞Ïó¥ Ïó¥ Î≥ÄÌôòÍ∞í

  arrY = arrY - 2; //ÏΩòÏÜîÏ¢åÌëú-&gt;Î∞∞Ïó¥ Ìñâ Î≥ÄÌôòÍ∞í

  //Î≥¥ÎìúÌåêÏóêÏÑú Î∏îÎ°ù Ïù¥ÎèôÏãú 1Ïù∏Ïãù

  for (y = 0; y &lt; 4; y++)

  {

    for (x = 0; x &lt; 4; x++)

    {

      if (blocks[n][y][x] == 1)

      {

        board[arrY + y][arrX + x] = 1;

      }

    }

  }

}

// Î∞∞Ïó¥,Î∏îÎ°ù ÏòÆÍπÄ

void Stepper(int column)

{

  int y, x;

  // boardÎ∞∞Ïó¥ Í∞í Ìñâ Îã§Ïö¥

  for (y = column; y &gt;= 0; y--)

  {

    for (x = 1; x &lt;= 10; x++)

    {

      board[y][x] = board[y - 1][x];

    }

  }

  // boardÎ∞∞Ïó¥ 0ÌñâÏóê 0ÏÇΩÏûÖ

  for (x = 1; x &lt;= 10; x++)

    board[0][x] = 0;

  // boardÎ∞∞Ïó¥ 1Í∞í Ï†ÑÏ≤¥ Ï∂úÎ†•

  for (y = 1; y &lt;= 19; y++)

  {

    for (x = 1; x &lt;= 10; x++)

    {

      SetCursorPosition((BOARD_X) + x * 2 + 1, y + BOARD_Y);

      if (board[y][x] == 1)

        printf("‚ñ†");

      else

        printf(" ");

    }

  }

}

//[ Î†àÎ≤® Ïä§ÏΩîÏñ¥ Í≥ÑÏÇ∞

void CountScore(void)

{

  score += 10;

  if (score % 50 == 0)

  {

    level += 1;

    speed -= 10; // Î†àÎ≤® 1Ï¶ùÍ∞ÄÏãú, 10 Î∞ÄÎ¶¨Ï¥àÏî© Îπ®ÎùºÏßê

  }

  ShowScore();

}

//[12]

// 1~10ÍπåÏßÄ ÌñâÏùò Ïó¥ Ï†ÑÏ≤¥Í∞Ä 1Î°úÎêòÎ©¥ Î∏îÎ°ùÏÇ¨ÎùºÏßê. ÏÇ¨ÎùºÏßÄÎ©¥ StepperÌï®Ïàò Ïã§Ìñâ

void RemoveLine(void)

{

  int i;

  int x, y;

  int z = 0;

  // 19ÌñâÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥ÏÑú 1ÌñâÍπåÏßÄ Î∞òÎ≥µ

  for (y = 19; y &gt;= 1; y--)

  {

    //ÌñâÍ∏∞Ï§ÄÏúºÎ°ú 4Î≤à Î∞òÎ≥µ

    for (z = 0; z &lt; 4; z++)

    {

      i = 0;

      //1Ïó¥Î∂ÄÌÑ∞ 10Ïó¥ÍπåÏßÄ Ï¶ùÍ∞Ä

      for (x = 1; x &lt; 11; x++)

      {

        //ÌñâÍ∏∞Ï§Ä

        if (board[y][x] == 1)

        {

          i++;

          //1Ïù¥ 10Í∞úÎ©¥ Ìñâ Î∏îÎ°ù ÏÇ≠Ï†ú

          if (i == 10)

          {

            for (x = 1; x &lt; 11; x++)

            {

              SetCursorPosition((x + 2) * 2, y + 2);

              printf(" ");

            }

            //Ìñâ Í∏∞Ï§ÄÏúºÎ°ú Î∏îÎ°ù ÎÇ¥Î¶¨Í∏∞

            CountScore();

            Stepper(y);

          }

        }

      }

    }

  }

}

// ÌòÑÏû¨ Î∏îÎ°ù ÌÅ¥Î¶¨Ïñ¥

void ClearBlock(int rotation, int move1, int move2)

{

  int x, y;

  COORD cursor = GetCursorPosition();

  if (CanPositionedAt(rotation, move1, move2) == true)

  {

    for (y = 0; y &lt; 4; y++)

    {

      for (x = 0; x &lt; 4; x++)

      {

        SetCursorPosition(cursor.X + (x * 2), cursor.Y + y);

        if (blocks[rotation][y][x] == 1)

          printf(" ");

      }

    }

    SetCursorPosition(cursor.X + move1, cursor.Y + move2);

  }

}

// Í≤åÏûÑ ÏãúÏûë

void StartGame(void)

{

  int n; // Î∏îÎ°ùÏ¢ÖÎ•òÎ•º Í≤∞Ï†ïÌïòÎäî Î≥ÄÏàò

  int kb; // ÌÇ§Î≥¥Îìú Í∞í

  int c = 2;

  srand((unsigned) time(0)); // rand() Ìï®ÏàòÎ°ú ÎûúÎç§Í∞íÏùÑ Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú Ï¥àÍ∏∞Í∞í Î∂ÄÏó¨

  PlaySound(TEXT("tetris.wav"), NULL, SND_ASYNC | SND_LOOP);

  // Í≤åÏûÑ ÏãúÏûë~ÎÅù

  while (1)

  {

    //Î∏îÎ°ù ÏÉùÏÑ± ÏúÑÏπò Ï¢åÌëú(13, 2)ÏóêÏÑú ÏãúÏûë

    SetCursorPosition(13, 2);

    n = rand() % 7; // 0~27ÍπåÏßÄÏùò Ïù∏Îç±Ïä§ ÏÉùÏÑ± : Î∏îÎ°ù Ï¢ÖÎ•ò Í≤∞Ï†ï

    n = n * 4; // Í∞Å Î∏îÎ°ùÏùò Ï≤´Î≤àÏß∏ Î∏îÎ°ù(0, 4, 8, 12, 16, 20, 24)ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ï∂úÎ†• Í∑∏Î¶¨Í≥† Î∞©Ìñ•ÌÇ§Î°ú Î≥ÄÌôòÌï† Ïàò
    ÏûàÎèÑÎ°ù

    if (level == 30) // Î†àÎ≤®Ïù¥ 30 Ïóê ÎèÑÎã¨ÌïòÎ©¥ Í≤åÏûÑ ÎÅù

    {

      SetCursorPosition(40, 15);

      printf("Game Clear");

      getchar();

      exit(1);

    }

    if (CanPositionedAt(n, 0, 0) == false)

      break; //Í≤åÏûÑ ÎÅù

    // Î∏îÎ°ù ÌïúÍ∞ú ÏúÑ~Î∞ë Ïù¥Îèô

    while (1)

    {

      int ww = 0;

      int k = 0;

      // Î∏îÎ°ù ÏïÑÎûòÎ°ú Ïù¥Îèô

      while (!_kbhit())

      {

        //Î∏îÎ°ù Ïáº

        WriteBlock(n);

        //ÎîúÎ†àÏù¥ ÌÉÄÏûÑ

        Sleep(DELAY + speed);

        //ÏïÑÎûòÏù¥ÎèôÏãú 1ÏûàÎäîÏßÄ ÌôïÏù∏

        if (CanPositionedAt(n, 0, 1) == false)

        {

          ww = 1;

          BoardInit(n, 0, 0); //Î≥¥Îìú Î≤ΩÎèå Î∞∞Ïó¥ 1Ï∂îÍ∞Ä

          RemoveLine();

          break;

        }

        ClearBlock(n, 0, 1); //boardÎ∞∞Ïó¥ +1Ìñâ

      }

      // CanPositionedAtÌï®ÏàòÏóêÏÑú Î∞∞Ïó¥Í∞í 1Î∞úÍ≤¨Ïãú Ï§ëÏßÄ

      if (ww == 1)

        break;

      kb = _getch();

      // Î∞©Ìñ•ÌÇ§

      switch (kb)

      {

      case LEFT:

        ClearBlock(n, -2, 0);

        WriteBlock(n);

        break;

      case RIGHT:

        ClearBlock(n, 2, 0);

        WriteBlock(n);

        break;

      case UP:

        // Ï≤´ÏàòÎ•ºÍµ¨ÌïúÎã§.

        k = n / 4;

        k *= 4;

        // Îã§ÏùåÏàòÍ∞Ä ÎÅùÏàòÏù¥ÌïòÏù∏Í∞Ä?

        if ((n + 1) &lt;= (k + 3))

        {

          k = n + 1;

        }

        if (CanPositionedAt(k, 0, 0) == true)

        {

          ClearBlock(n, 0, 0);

          n = k;

          WriteBlock(n);

          break;

        }

        break;

      case DOWN:

        ClearBlock(n, 0, 2);

        break;

      case SPACE: // ÏïÑÎûòÎ°ú Îöù Îñ®Ïñ¥ÏßÄÎäî Î°úÏßÅ

        while (1)

        {

          ClearBlock(n, 0, 1);

          if (CanPositionedAt(n, 0, 1) == false)

          {

            WriteBlock(n);

            BoardInit(n, 0, 0);

            break;

          }

        }

      default:
        break;

      } // end switch

    } // end while(Î∏îÎ°ù)

  } // end while(Í≤åÏûÑ)

}

// Í≤åÏûÑ Ï¢ÖÎ£å ÌôîÎ©¥

void EndGame()

{

  SetCursorPosition(40, 15);

  printf("Game Over");

  getch(); // ÏûÖÎ†• ÎåÄÍ∏∞

  system("cls");

}

// Î©îÏù∏ Ìï®Ïàò

int main()

{

  ConsoleInit(); // ÏãúÏûë ÌôîÎ©¥

  DrawField(); // Í≤åÏûÑ ÏòÅÏó≠ Ï∂úÎ†•

  ShowScore(); // Ï†êÏàòÌåê Ï∂úÎ†•

  StartGame(); // Í≤åÏûÑ ÏãúÏûë

  EndGame(); // Í≤åÏûÑ Ï¢ÖÎ£å ÌôîÎ©¥

}
</code></pre></div></div>

:ET